{"version":3,"sources":["utils/constants.ts","types/TypeSort.ts","utils/functions.ts","components/Navbar.tsx","App.tsx","api.ts","utils/searchHelper.ts","components/SearchLink.tsx","types/Sex.ts","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersonLink.tsx","components/PeopleTable.tsx","components/Pages/PeoplePage.tsx","components/Pages/NotFaundPage.tsx","components/Pages/HomePage.tsx","Root.tsx","index.tsx"],"names":["Gender","TABLE_COLUMN_NAMES","CENTURIES_NUMBERS","TypeSort","getParent","persons","person","mama","find","name","motherName","fatherName","getLinkClass","isActive","classnames","hasIncludeQuery","query","normalizedQuery","toLowerCase","includes","getFilteredPeople","people","sex","centuries","sort","order","preparedPeople","length","filter","numberOfCentury","Math","ceil","born","toString","a","b","localeCompare","died","sortPeople","reverse","Navbar","className","role","to","App","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","Sex","PeopleFilters","setSeacrhParams","get","getAll","All","Male","Female","type","placeholder","onChange","event","target","map","century","selectedNumber","Loader","PersonLink","slug","restOfParams","sortTableColumnNames","PeopleTable","personSlug","useParams","newSortType","mother","father","PeoplePage","useState","isLoading","setIsLoading","isErrorHappened","setIsErrorHappened","setPeople","useLocation","useEffect","getPeople","peopleFromServer","personData","catch","finally","isPeopleNotExist","NotFoundPage","HomePage","Root","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.20ff703d.chunk.js","sourcesContent":["export const NOT_SET_VALUE = '-';\n\nexport enum Gender {\n  Male = 'm',\n  Female = 'f',\n}\n\nexport const TABLE_COLUMN_NAMES = [\n  'Name', 'Sex', 'Born', 'Died', 'Mother', 'Father',\n];\nexport const CENTURIES_NUMBERS = [\n  '16', '17', '18', '19', '20',\n];\nexport const YEARS_PER_CENTURY = 100;\n","export const TypeSort = {\n  Name: 'name',\n  Sex: 'sex',\n  Born: 'born',\n  Died: 'died',\n};\n","import classnames from 'classnames';\nimport { Person } from '../types';\nimport { YEARS_PER_CENTURY } from './constants';\nimport { TypeSort } from '../types/TypeSort';\n\nexport function getParent(\n  persons: Person[],\n  person: Person,\n  mama: string,\n) {\n  if (mama === 'mama') {\n    return persons.find(({ name }: Person) => name === person.motherName);\n  }\n\n  return persons.find(({ name }: Person) => name === person.fatherName);\n}\n\nexport const getLinkClass = ({ isActive }: { isActive: boolean }) => {\n  return classnames('navbar-item', {\n    'has-background-grey-lighter': isActive,\n  });\n};\n\nexport const hasIncludeQuery = (name: string, query: string) => {\n  const normalizedQuery = query.toLowerCase();\n\n  return name.toLowerCase().includes(normalizedQuery);\n};\n\nconst sortPeople = (people: Person[], sort: string) => {\n  people.sort((a, b) => {\n    switch (sort) {\n      case TypeSort.Name:\n        return a.name.localeCompare(b.name);\n      case TypeSort.Sex:\n        return a.sex.localeCompare(b.sex);\n      case TypeSort.Born:\n        return a.born - b.born;\n      case TypeSort.Died:\n        return a.died - b.died;\n      default:\n        return 0;\n    }\n  });\n};\n\nexport const getFilteredPeople = (\n  people: Person[],\n  sex: string,\n  centuries: string[],\n  query: string,\n  sort: string,\n  order: string,\n) => {\n  let preparedPeople = [...people];\n\n  if (sex.length > 0) {\n    preparedPeople = preparedPeople.filter((person) => {\n      return person.sex === sex;\n    });\n  }\n\n  if (centuries.length > 0) {\n    preparedPeople = preparedPeople.filter(person => {\n      const numberOfCentury = Math.ceil(person.born / YEARS_PER_CENTURY);\n\n      return centuries.includes(numberOfCentury.toString());\n    });\n  }\n\n  if (query) {\n    preparedPeople = preparedPeople.filter(person => {\n      return hasIncludeQuery(person.name, query)\n        || hasIncludeQuery((person.motherName || ''), query)\n        || hasIncludeQuery((person.fatherName || ''), query);\n    });\n  }\n\n  if (sort) {\n    sortPeople(preparedPeople, sort);\n  }\n\n  if (order) {\n    preparedPeople.reverse();\n  }\n\n  return preparedPeople;\n};\n\nexport const getPreparedPeople = (persons: Person[]) => {\n  return persons.map((personData) => {\n    const mother = getParent(\n      persons, personData, 'mama',\n    );\n    const father = getParent(\n      persons, personData, 'papa',\n    );\n\n    return {\n      ...personData,\n      mother,\n      father,\n    };\n  });\n};\n","import { NavLink } from 'react-router-dom';\nimport { getLinkClass } from '../utils/functions';\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink to=\"/\" className={getLinkClass}>\n            Home\n          </NavLink>\n\n          <NavLink to=\"/people\" className={getLinkClass}>\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\n\nimport './App.scss';\nimport { Navbar } from './components/Navbar';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <Navbar />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </main>\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\nexport const SearchLink: React.FC<Props> = ({\n  children,\n  params,\n  ...props\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props}\n    >\n      {children}\n    </Link>\n  );\n};\n","export enum Sex {\n  All = 'All',\n  Male = 'Male',\n  Female = 'Female',\n}\n","import { useSearchParams } from 'react-router-dom';\nimport classnames from 'classnames';\n\nimport { SearchLink } from './SearchLink';\nimport { getSearchWith } from '../utils/searchHelper';\nimport { Sex } from '../types/Sex';\nimport { CENTURIES_NUMBERS, Gender } from '../utils/constants';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSeacrhParams] = useSearchParams();\n\n  const sex = searchParams.get('sex') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const query = searchParams.get('query') || '';\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSeacrhParams(\n      getSearchWith(searchParams, { query: event.target.value || null }),\n    );\n  };\n\n  const toggleCentury = (selectedNumber: string) => {\n    return centuries.includes(selectedNumber)\n      ? centuries.filter(century => century !== selectedNumber)\n      : [...centuries, selectedNumber];\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          className={classnames({ 'is-active': !sex })}\n          params={{ sex: null }}\n        >\n          {Sex.All}\n        </SearchLink>\n        <SearchLink\n          className={classnames({ 'is-active': sex === Gender.Male })}\n          params={{ sex: Gender.Male }}\n        >\n          {Sex.Male}\n        </SearchLink>\n        <SearchLink\n          className={classnames({ 'is-active': sex === Gender.Female })}\n          params={{ sex: Gender.Female }}\n        >\n          {Sex.Female}\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {CENTURIES_NUMBERS.map(century => (\n              <SearchLink\n                key={century}\n                data-cy=\"century\"\n                className={classnames('button', 'mr-1', {\n                  'is-info': centuries.includes(century),\n                })}\n                params={{ centuries: toggleCentury(century) }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className=\"button is-success is-outlined\"\n              params={{ centuries: [] }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            centuries: [],\n            sex: null,\n            query: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Link, useSearchParams } from 'react-router-dom';\nimport classnames from 'classnames';\nimport { Person } from '../types';\nimport { Gender } from '../utils/constants';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const { slug, sex, name } = person;\n\n  const [params] = useSearchParams();\n  const restOfParams = params.toString();\n\n  return (\n    <Link\n      to={`../${slug}?${restOfParams}`}\n      className={classnames({\n        'has-text-danger': sex === Gender.Female,\n      })}\n    >\n      {name}\n    </Link>\n  );\n};\n","import { useParams, useSearchParams } from 'react-router-dom';\nimport classnames from 'classnames';\nimport { Person } from '../types';\nimport { SearchLink } from './SearchLink';\nimport { SearchParams } from '../utils/searchHelper';\nimport { NOT_SET_VALUE, TABLE_COLUMN_NAMES } from '../utils/constants';\nimport { PersonLink } from './PersonLink';\n\nconst sortTableColumnNames = ['Name', 'Sex', 'Born', 'Died'];\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PeopleTable: React.FC<Props> = ({\n  people,\n}) => {\n  const { personSlug } = useParams();\n\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n\n  const getSortedParams = (newSortType: string): SearchParams => {\n    if (sort !== newSortType) {\n      return {\n        sort: newSortType,\n        order: null,\n      };\n    }\n\n    if (sort === newSortType && !order) {\n      return { order: 'desc' };\n    }\n\n    return {\n      sort: null,\n      order: null,\n    };\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {TABLE_COLUMN_NAMES.map((name) => {\n            return sortTableColumnNames.includes(name) ? (\n              <th key={name}>\n                <span className=\"is-flex is-flex-wrap-nowrap\">\n                  {name}\n                  <SearchLink params={getSortedParams(name.toLowerCase())}>\n                    <span className=\"icon\">\n                      <i\n                        className={classnames('fas', {\n                          'fa-sort': sort !== name.toLowerCase(),\n                          'fa-sort-up': sort === name.toLowerCase() && !order,\n                          'fa-sort-down': sort === name.toLowerCase() && order,\n                        })}\n                      />\n                    </span>\n                  </SearchLink>\n                </span>\n              </th>\n            ) : (\n              <th key={name}>\n                {name}\n              </th>\n            );\n          })}\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => {\n          const {\n            sex,\n            born,\n            died,\n            fatherName,\n            motherName,\n            slug,\n            mother,\n            father,\n          } = person;\n\n          return (\n            <tr\n              data-cy=\"person\"\n              className={classnames({\n                'has-background-warning': slug === personSlug,\n              })}\n            >\n              <td>\n                <PersonLink person={person} />\n              </td>\n\n              <td>{sex}</td>\n              <td>{born}</td>\n              <td>{died}</td>\n              <td>\n                {mother\n                  ? <PersonLink person={mother} />\n                  : motherName || NOT_SET_VALUE}\n              </td>\n              <td>\n                {father\n                  ? <PersonLink person={father} />\n                  : fatherName || NOT_SET_VALUE}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { Person } from '../../types';\nimport { getPeople } from '../../api';\nimport {\n  getFilteredPeople,\n  getPreparedPeople,\n} from '../../utils/functions';\nimport { PeopleFilters } from '../PeopleFilters';\nimport { Loader } from '../Loader';\nimport { PeopleTable } from '../PeopleTable';\n\nexport const PeoplePage = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isErrorHappened, setIsErrorHappened] = useState(false);\n  const [people, setPeople] = useState<Person[]>([]);\n\n  const { search } = useLocation();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then((peopleFromServer) => {\n        setPeople(getPreparedPeople(peopleFromServer));\n      })\n      .catch(() => setIsErrorHappened(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const params = new URLSearchParams(search);\n\n  const sex = params.get('sex') || '';\n  const centuries = params.getAll('centuries') || [];\n  const query = params.get('query') || '';\n  const sort = params.get('sort') || '';\n  const order = params.get('order') || '';\n\n  const preparedPeople = getFilteredPeople(\n    people,\n    sex,\n    centuries,\n    query,\n    sort,\n    order,\n  );\n\n  const isPeopleNotExist = !isLoading\n    && !isErrorHappened\n    && !preparedPeople.length;\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {!!people.length && (\n              <PeopleFilters />\n            )}\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && <Loader />}\n\n              {isErrorHappened && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {isPeopleNotExist && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {!!preparedPeople.length && (\n                <PeopleTable\n                  people={preparedPeople}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","export const NotFoundPage = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import {\n  HashRouter as Router,\n  Navigate,\n  Routes,\n  Route,\n} from 'react-router-dom';\n\nimport { App } from './App';\nimport { PeoplePage } from './components/Pages/PeoplePage';\nimport { NotFoundPage } from './components/Pages/NotFaundPage';\nimport { HomePage } from './components/Pages/HomePage';\n\nexport const Root = () => {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<HomePage />} />\n\n          <Route path=\"people\">\n            <Route path=\":personSlug?\" element={<PeoplePage />} />\n          </Route>\n\n          <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Route>\n      </Routes>\n      <App />\n    </Router>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Root />,\n  );\n"],"sourceRoot":""}